{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the knoledge base of Technolitrix","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"drive-wheel-glue-jig/","title":"Drive Wheel Glue Jig","text":"<p>Refer to OHAI-Opulo Instructions</p> <p>Always refer to the OHAI-Opulo instructions: OHAI Opulo Feeder Instruction's</p> <p>Files</p> <ul> <li>You can find both the STL and STEP files on my GitHub for downloading or customizing.  </li> <li>When gluing multiple drive wheels at once (e.g., 30 units), print as many jigs as needed to speed up the process.</li> <li>Opulo uses some kind of shims to get clearence between indexing-wheel and feeder body. I used 5 Post-It's and cut a slot in it, to go around the motor shaft. This slefmade shim should then fit in the largest opening where you see the indexing-wheel. Then lay the indexing-wheel on it, press it down and thigten the set-screw, lastly pull the shim out.</li> </ul>"},{"location":"drive-wheel-glue-jig/#why-this-tool","title":"Why This Tool?","text":"<p>The standard jigs for assembling Opulo's drive wheel are often insufficient for precise alignment during the gluing process. That\u2019s why I designed this easy-to-print jig to simplify the task for everyone.</p> <p> </p>"},{"location":"drive-wheel-glue-jig/#features-and-benefits","title":"Features and Benefits","text":"<p>This is all you need for the jig:</p> <p>Required Parts</p> <ul> <li>N20 Motor (best use the N20 motors you already have for the peel motor)</li> <li>The jig requires three M3x12mm screws, preferably flat head.  </li> <li>Standard M3x12mm screws can also be used, but they will protrude slightly on the other side. This is perfectly fine if flat head screws are not available.  </li> <li>Three M3 nuts</li> <li>Shaft collar</li> <li>Indexing wheel</li> </ul> <p></p> <p>Put the screws and nuts in:</p> <p></p>"},{"location":"drive-wheel-glue-jig/#pay-attention","title":"Pay Attention","text":"N20 Alignment <ul> <li>Correct: </li> <li>Wrong: Just use your fingernail and rotate the gears inside; the motor will move.  </li> <li>Don't: Rotate the shaft into alignment by turning the 3D print\u2014this will deform the print! </li> </ul> <p>Now you can push the motor into its place.</p> <p></p> <p>N20 Shaft</p> <p>Be careful when putting the N20 motor shaft into the 3D print. It is designed to be very tight. Use some pressure and a bit of wiggling to get it in the hole. If you have trouble getting it in, use a heat gun or lighter to heat the shaft slightly. Avoid overheating, as this may deform the print and misalign the collar.</p> <p>It should look like this:</p> <p></p> <p></p> <p>Make sure the indexing wheel is mounted to the jig, facing like in the picture. The glue area should not point to the flat side of the shaft.</p> <p></p> <p>Now put the shaft collar onto the shaft (slightly screw the set screw in so it won't rotate on the motor shaft). Push the collar onto the indexing wheel and tighten the set screw.</p> <p></p> <p>Make sure there is no gap between both:</p> <p></p> <p></p> <p>After this is done, use the glue and apply it to the glue area as described in Opulo\u2019s guide.</p> <p>Adhesive</p> <p>Use a fast-curing adhesive like Loctite 435 or a similar instant glue to attach the drive wheel components securely.</p>"},{"location":"drive-wheel-glue-jig/#printing-instructions","title":"Printing Instructions","text":"<ul> <li>Material: PLA  </li> <li>Printer: Ender 3 or similar  </li> <li>Print Time: Approximately 27 minutes  </li> <li>Infill: 20%  </li> <li>Supports: Enabled  </li> <li>Orientation: Place the smaller circular side flat on the build plate.</li> </ul>"},{"location":"sauna_controller/","title":"Sauna Controller","text":"<p>A project for controlling a sauna using sensors and actuators. This application allows precise management of temperature, humidity, and other parameters to ensure an optimal sauna experience.</p>"},{"location":"sauna_controller/#features","title":"Features","text":"<ul> <li>Temperature Control: Automatically adjusts the temperature based on predefined settings.</li> <li>Humidity Management: Integrates humidity sensors for maintaining the perfect sauna environment.</li> <li>Scheduling: Enables the sauna to operate at predefined times.</li> <li>Fallback Mode: Ensures stable operation even during connectivity issues.</li> </ul>"},{"location":"sauna_controller/#configuration-overview","title":"Configuration Overview","text":"<p>The main configuration file is <code>sauna1.yaml</code>. It contains all the necessary settings for operating the sauna controller. Sensitive data such as passwords and API keys are managed through references (<code>!secret</code>) in a separate file, such as <code>secrets.yaml</code>.</p> <p>Example of a reference in the YAML file: <pre><code>wifi:\n  ssid: !secret wifi_ssid_sauna\n  password: !secret wifi_password_sauna\n</code></pre></p>"},{"location":"sauna_controller/#note","title":"Note","text":"<p>The <code>secrets.yaml</code> file is not included in this repository. It should contain sensitive data and remain private.</p>"},{"location":"sauna_controller/#directory-structure","title":"Directory Structure","text":"<ul> <li><code>config/</code>: Contains main configuration files like <code>sauna1.yaml</code>.</li> <li><code>pictures/</code>: Contains images for documentation and illustration.</li> <li><code>scripts/</code>: Scripts supporting sauna control.</li> <li><code>logs/</code>: Log files for debugging and tracking.</li> </ul>"},{"location":"sauna_controller/#installation-and-usage","title":"Installation and Usage","text":""},{"location":"sauna_controller/#prerequisites","title":"Prerequisites","text":"<ul> <li>A device capable of managing the controller (e.g., Raspberry Pi, ESP32).</li> <li>Sensors and actuators compatible with the sauna setup.</li> </ul>"},{"location":"sauna_controller/#steps","title":"Steps","text":"<ol> <li>Clone the repository:    <pre><code>git clone https://github.com/Technolitix/Sauna-Controller.git\n</code></pre></li> <li>Adjust the configuration file:    Edit <code>sauna1.yaml</code> to suit your sauna's specific requirements.</li> <li>Configure secrets:    Create a <code>secrets.yaml</code> file and add sensitive data:    <pre><code>wifi_ssid_sauna: \"YourWiFiName\"\nwifi_password_sauna: \"YourWiFiPassword\"\n</code></pre></li> <li>Deploy and start:    Upload the configuration to your device and start the controller.</li> </ol> <p>Security</p> <ul> <li>The <code>secrets.yaml</code> file should never be included in the repository.</li> <li>Always ensure sensitive data is stored externally and securely.</li> </ul>"},{"location":"sauna_controller/#contact","title":"Contact","text":"<p>If you have any questions or issues, feel free to open an Issue.</p>"},{"location":"trix-spotlight-storage/","title":"How is it set up","text":"<p>All needed code is in the Github Repo. It's manly for me, to have some documentation of how I have set all of it up.</p>"},{"location":"trix-spotlight-storage/#violentmonkey-browser-plugin","title":"Violentmonkey Browser Plugin","text":"<p>I use this plugin for google chrome. This uses code to get the Part-DB \"ID\" of the parts, and send's it to nodered.</p>"},{"location":"trix-spotlight-storage/#mariadb","title":"MariaDB","text":"<p>Here I have one table per storage location that shows where a part is located with ws2812 led's. It contains: </p> Variables e.g. Description <code>partdb_id</code> 1 ID of the part's <code>from</code> 0 At witch pixel to start the storage bin <code>to</code> 5 At witch pixel to stop the storage bin <code>r</code> 255 Color red of the pixel's <code>g</code> 0 Color green of the pixel's <code>b</code> 0 Color blue of the pixel's <p> </p>"},{"location":"trix-spotlight-storage/#system-flow","title":"System Flow","text":"<pre><code>      graph LR\n        A[Part DB] &lt;---&gt; C{Browser\n        to GUI};\n        A[Part DB] --&gt;|ID| B[Part Finder \n        Violentmonkey];\n        B --&gt;|ID| D{NodeRed};\n        D &lt;--&gt; G[SQL Database];\n        G &lt;--&gt; O[ID / FROM / TO / R / G / B\n        1  /  0  /  5  /  255  /  0  /  0  ];\n        D -----&gt;|ID=1/From=0/To=5/R=255/G=0/B=0| H[MQTT];\n        H ---&gt; I[ESP 1\n        Storage 1];\n        I --&gt; L[WS2812\n        Storage Bin's];\n        H ---&gt; J[ESP 2\n        Storage 2];\n        J --&gt; M[WS2812\n        Storage Bin's];\n        H ---&gt; K[ESP ...\n        Storage ...];\n        K --&gt; N[WS2812\n        Storage Bin's];</code></pre>"},{"location":"trix-spotlight-storage/#nodered-flow","title":"NodeRed Flow","text":""}]}